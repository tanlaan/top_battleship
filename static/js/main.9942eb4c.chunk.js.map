{"version":3,"sources":["components/Header.js","components/Footer.js","components/BoardTable.js","components/PlayBoard.js","components/MoveBoard.js","game/Ship.js","game/coordinates.js","game/GameBoard.js","game/Player.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["Header","gameover","winner","Footer","BoardTable","props","board","map","x","i","y","j","className","character","onClick","click","e","PlayBoard","playBoard","MoveBoard","moveBoard","Ship","length","hits","Array","hit","place","isSunk","filter","String","getRandomInt","max","Math","floor","random","coordinateToIntegers","coordinate","split","Number","initBoard","newBoard","fill","GameBoard","state","ships","placeShip","orientation","newShip","positions","isValidMove","isValidPlay","coordinates","Object","keys","push","xBoundary","yBoundary","isLoser","allSunk","receiveAttack","placeShipRandomly","wasPlayed","Player","attack","myBoard","enemyBoard","goodMove","hitStatus","Game","setGameover","setWinner","initGameBoard","useState","playerBoard","setPlayerBoard","computerBoard","setComputerBoard","human","computer","playerTurn","setPlayerTurn","useEffect","intPlayer","intComputer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9942eb4c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = ({gameover, winner}) => {\n    return (\n        <header>\n            <h1>BattleShip: The Game</h1>\n            <h2>Created by Chris Bolas</h2>\n            {gameover && <h3>GAMEOVER</h3>}\n            {winner && <h3>{winner} won!</h3>}\n        </header>\n    )\n}\n\nexport default Header","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <h3>&#169; Chris Bolas: Made for The Odin Project</h3>\n        </footer>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\n\nconst BoardTable = (props) => {\n    const getClass = (character) => {\n        if (typeof(character) === 'function') {\n            return 'ship'\n        } else if (character === '/') {\n            return 'miss'\n        } else if (character === 'X') {\n            return 'hit'\n        } else {\n            return ''\n        }\n    }\n    return (\n        <table>\n            <tbody>\n                { props.board.map((x, i) => {\n                    return (\n                        <tr key={i}>\n                            {x.map((y, j) => {\n                                return (\n                                    <td\n                                        className={getClass(y)}\n                                        key={j} \n                                        onClick={props.click \n                                            ? (e) => { props.click(i + ',' + j) }\n                                            : ()=>{}}\n                                    >\n                                        {typeof(y) === 'function' && '*'}\n                                        {typeof(y) === 'undefined' && ''}\n                                        {typeof(y) === 'string' && y}\n                                    </td> \n                                )\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default BoardTable;\n","import React from 'react';\nimport BoardTable from './BoardTable'\n\nconst PlayBoard = (props) => {\n    return (\n        <div>\n            <h3>Play Board:</h3>\n            <BoardTable board={props.board.playBoard}/>\n        </div>\n    );\n}\n\nexport default PlayBoard;\n","import React from 'react';\nimport BoardTable from './BoardTable';\n\nconst MoveBoard = (props) => {\n    return (\n        <div>\n            <h3>Move Board:</h3>\n            <BoardTable board={props.board.moveBoard} click={props.click}/>\n        </div>\n    );\n}\n\nexport default MoveBoard;\n","const Ship = (length) => {\n    const hits = new Array(length)\n\n    const hit = (place) => {\n        hits[place] = 'x'\n    }\n    const isSunk = () => { \n        return hits.filter(String).length === length \n    }\n\n    return {\n        length,\n        hits,\n        hit,\n        isSunk\n    }\n}\n\nexport default Ship","const coordinateToIntegers = (coordinate) => {\n    // Take in string form, convert to array integers\n    let [x, y] = coordinate.split(',')\n    x = Number(x)\n    y = Number(y)\n    return [x, y]\n}\n\nexport const integersToCoordinate = (x, y) => {\n    x = String(x)\n    y = String(y)\n    return x + ',' + y\n}\n\nexport const getRandomInt = (max) => {\n    return Math.floor(Math.random() * Math.floor(max))\n}\n\nexport default coordinateToIntegers","import Ship from './Ship'\nimport coordinateToIntegers, {getRandomInt} from './coordinates'\n\nconst GameBoard = (state) =>{\n    const playBoard = initBoard()\n    const moveBoard = initBoard()\n    const ships = []\n\n    if (state) {\n\n        // Copy play and move boards\n        for (let x = 0; x < playBoard.length; x++) {\n            for ( let y = 0; y < playBoard[0].length; y++) {\n                playBoard[x][y] = state.playBoard[x][y]\n                moveBoard[x][y] = state.moveBoard[x][y]\n            }\n        }\n\n        // Copy ships array\n        for (let i = 0; i < state.ships.length; i++) {\n            ships[i] = state.ships[i]\n        }\n    }\n\n    const placeShip = (length, coordinate, orientation='H') => {\n        const [x, y] = coordinateToIntegers(coordinate)  \n        const newShip = Ship(length)\n        const positions = {}\n\n        // Is our entire ship on the game board?\n        if (!isValidMove(x, y, length, orientation)) return false\n        // Calculate all the coordinates it will take up\n        for ( let i = 0; i < length; i++ ) {\n            if (orientation === 'H') {\n\n                // We are 'increasing' Vertically\n                positions[x + ','  + (y + i)] = () => newShip.hit(i)\n            } else {\n\n                // We are 'increasing' horizontally\n                positions[(x + i) + ',' + y] = () => newShip.hit(i)\n            }\n        }\n        // Verify no overlapping plays\n        if (!isValidPlay(positions, playBoard)) return false \n\n        // Integrate new ship positions into playBoard\n        const coordinates = Object.keys(positions)\n        for (let i = 0; i < coordinates.length; i++ ) {\n            let [x, y] = coordinateToIntegers(coordinates[i])\n            playBoard[x][y] = positions[coordinates[i]]\n        }\n        \n        // Add ship to player's ship list\n        ships.push(newShip)\n\n        // Success!\n        return true\n    }\n\n    const placeShipRandomly = (length, orientation) => {\n        let wasPlayed = false\n        if (!orientation) {\n            let chance = getRandomInt(2)\n            if (chance === 0) {\n                orientation = 'H'\n            } else {\n                orientation = 'V'\n            }\n        }\n        while (!wasPlayed) {\n            const x = getRandomInt(10)\n            const y = getRandomInt(10)\n            wasPlayed = placeShip(length, x+','+y, orientation)\n        }\n        return true\n    }\n    \n    const receiveAttack = (coordinate) => {\n        // Returns true if hit, false if miss\n        const hit = 'X'\n        const miss = '/'\n        const [x, y] = coordinateToIntegers(coordinate)\n\n        // Check opponents playBoard for hit\n        if(typeof playBoard[x][y] !== 'undefined') {\n            playBoard[x][y]()\n            playBoard[x][y] = hit\n            return true\n        } else {\n            playBoard[x][y] = miss\n            return false\n        }\n    }\n\n    const isLoser = () => {\n        let allSunk = true\n        for (let i = 0; i < ships.length; i++ ) {\n            if (!ships[i].isSunk()) {\n                allSunk = false\n            }\n        }\n        return allSunk \n    }\n\n    const isValidMove = (x, y, length, orientation) => {\n        // Check coordinate out of bounds\n        let xBoundary\n        let yBoundary\n        if (orientation === 'H') {\n            xBoundary = 10\n            yBoundary = 10 - length\n        } else {\n            xBoundary = 10 - length\n            yBoundary = 10\n        }\n        if (x < 0 || x > xBoundary) return false\n        if (y < 0 || y > yBoundary) return false\n        return true\n    }\n\n    const isValidPlay= (positions, playBoard) => {\n        // positions is still an object\n        // now we need to convert playboard into\n        // an array so we can keep track of our\n        // opponent's hits and misses\n        let keys = Object.keys(positions)\n        for (let i = 0; i < keys.length; i++) {\n            let [x, y] = coordinateToIntegers(keys[i])\n            if (typeof playBoard[x][y] !== 'undefined') return false\n        }\n        return true\n    }\n    \n    return {\n        isLoser,\n        receiveAttack,\n        placeShip,\n        placeShipRandomly,\n        playBoard,\n        moveBoard,\n        ships\n    }\n}\n\nconst initBoard = () => {\n    const newBoard = []\n    for ( let i = 0; i < 10; i++) {\n        newBoard[i] = new Array(10).fill()\n    }\n    return newBoard\n}\n\nexport default GameBoard\n","import {getRandomInt} from './coordinates'\nconst Player = () => {\n    const attack = (myBoard, enemyBoard, coordinate) => {\n        let x\n        let y\n\n        if (coordinate) {\n            [x, y] = coordinate.split(',')\n            \n            // Player tried to attack the same place twice\n            if (typeof myBoard.moveBoard[x][y] !== 'undefined') {\n                return false\n            }\n        } else {\n            // Until we find a new move, keep trying\n            let goodMove = false\n            while (!goodMove) {\n                x = getRandomInt(10)\n                y = getRandomInt(10)\n                if (typeof myBoard.moveBoard[x][y] === 'undefined') {\n                    goodMove = true\n                }\n            }\n            \n            // We found a new move\n            //\n            // Look more into this, it seems like I am polluting\n            // the global namespace here?\n            coordinate = x + ',' + y\n        }\n        \n        const hit = 'X'\n        const miss = '/'\n\n        // Tell enemyBoard about our attack\n        const hitStatus = enemyBoard.receiveAttack(coordinate)\n\n        myBoard.moveBoard[x][y] = hitStatus ? hit : miss\n        return true\n    }\n    \n    return {\n        attack\n    }\n}\n\nexport default Player\n","import React, {useEffect, useState} from 'react';\nimport PlayBoard from './PlayBoard'\nimport MoveBoard from './MoveBoard'\nimport GameBoard from '../game/GameBoard'\nimport Player from '../game/Player'\n\nconst Game = ({gameover, setGameover, setWinner}) => {\n    // Randomized Boards\n    const initGameBoard = () => {\n        const board = GameBoard()\n        board.placeShipRandomly(5)\n        board.placeShipRandomly(4)\n        board.placeShipRandomly(3)\n        board.placeShipRandomly(3)\n        board.placeShipRandomly(2)\n        return board\n    }\n\n    const [playerBoard, setPlayerBoard] = useState(initGameBoard())\n    const [computerBoard, setComputerBoard] = useState(initGameBoard())\n    const human = Player()\n    const computer = Player()\n    const [playerTurn, setPlayerTurn] = useState(true)\n\n    const clickHandler = (coordinate) => {\n        const intPlayer = GameBoard(playerBoard)\n        const intComputer = GameBoard(computerBoard)\n        if(human.attack(intPlayer, intComputer, coordinate)) {\n            setPlayerBoard(intPlayer)\n            setComputerBoard(intComputer)\n            setPlayerTurn(false)\n        }\n    }\n\n    useEffect(() => {\n        // Update winner state after each move\n        if(playerBoard.isLoser()){\n            setGameover(true)\n            setWinner('Computer')\n        } else if (computerBoard.isLoser()) {\n            setGameover(true)\n            setWinner('Player')\n        }\n    }, [playerBoard, computerBoard, setGameover, setWinner]);\n\n    useEffect(() => {\n        // Computer's turn\n        if(!playerTurn && !gameover) {\n            const intPlayer = GameBoard(playerBoard)\n            const intComputer = GameBoard(computerBoard)\n            computer.attack(intComputer, intPlayer)\n            setComputerBoard(intComputer)\n            setPlayerBoard(intPlayer)\n            setPlayerTurn(true)\n        }\n    }, [computer, gameover, playerBoard, computerBoard, playerTurn, setPlayerTurn])\n    \n    return (\n        <div>\n            <MoveBoard board={playerBoard} click={clickHandler}/> \n            <PlayBoard board={playerBoard} />\n        </div>\n    );\n}\n\nexport default Game;\n","import React, {useState} from 'react';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Game from './components/Game'\nimport './App.css'\n\nconst App = () => {\n  const [gameover, setGameover] = useState(false)\n  const [winner, setWinner] = useState('')\n  return (\n    <div>\n      <Header \n        gameover={gameover}\n        winner={winner}\n      />\n      <Game \n        gameover={gameover}\n        setGameover={setGameover}\n        setWinner={setWinner}\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}